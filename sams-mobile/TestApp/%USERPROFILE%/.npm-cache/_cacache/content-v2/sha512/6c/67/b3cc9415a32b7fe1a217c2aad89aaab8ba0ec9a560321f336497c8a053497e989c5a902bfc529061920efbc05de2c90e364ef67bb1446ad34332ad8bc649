{"_id":"@standard-schema/spec","_rev":"6-78e950b3267a2e0a70c47dfcae1884b3","name":"@standard-schema/spec","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0-beta.0":{"name":"@standard-schema/spec","version":"1.0.0-beta.0","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-beta.0","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"fa7afa617aa6a485b66fdc3e1df7ab6a903024a7","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-beta.0.tgz","fileCount":7,"integrity":"sha512-//opTrDGFcAaG8BNc0btA5wwU1V573X/UezT5jgfwucdZEbzukpKCsFUJVskH6aJ3KNVOXdSbhS4YWFfnyLVbA==","signatures":[{"sig":"MEUCIEBy85HFn8vwfDO5c4Lf0d8v3EZsaYc2RCPD02prlK2EAiEArW5bocywnDi5ZOrVTdKLbddiDHBKX6lgSMc3mn/H82M=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":16949},"main":"./dist/index.js","type":"module","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"gitHead":"889b3918f64c418aabd0de40dd0d0e35258f6022","scripts":{"lint":"pnpm biome lint ./src","test":"vitest --typecheck","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.0","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.11.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2","@biomejs/biome":"^1.9.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-beta.0_1727406475833_0.4525958237428134","host":"s3://npm-registry-packages"}},"1.0.0-beta.1":{"name":"@standard-schema/spec","version":"1.0.0-beta.1","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-beta.1","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"dbd8e08cdb014bd113ae10a9f9a87354f86b55b5","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-beta.1.tgz","fileCount":7,"integrity":"sha512-XFHxCgvFiNrofjsZ1SFLKjLSo6kM9WITBU6gPnkKtrQ6fSuPWhZ/7gLTWmMcMprFgN4FfU1Wcsr5+jNkRaksCQ==","signatures":[{"sig":"MEUCIAcCnPV/FmHA1YJCZibWB+EcACTI9bLQDQtPsxPz138GAiEA0Gc6iihVlL815adsfySqf1eMEWitsLGj5y7Sr5Jvr78=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0-beta.1","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":22820},"main":"./dist/index.js","type":"module","_from":"file:standard-schema-spec-1.0.0-beta.1.tgz","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"scripts":{"lint":"pnpm biome lint ./src","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"_resolved":"/tmp/9d9ecae5223ede7ea4617dbcdb0ee0b5/standard-schema-spec-1.0.0-beta.1.tgz","_integrity":"sha512-XFHxCgvFiNrofjsZ1SFLKjLSo6kM9WITBU6gPnkKtrQ6fSuPWhZ/7gLTWmMcMprFgN4FfU1Wcsr5+jNkRaksCQ==","repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.2","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.17.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-beta.1_1728191700871_0.045437036406358766","host":"s3://npm-registry-packages"}},"1.0.0-beta.2":{"name":"@standard-schema/spec","version":"1.0.0-beta.2","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-beta.2","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"12ce88bcf5047a026c1d3c513403d91e2a71f08e","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-beta.2.tgz","fileCount":7,"integrity":"sha512-3xO2jovtlaUYPgj6lTL5rgRnKiPyXQXwUmYlQBu2WcTNHrFdbQZ7nrOcqSEtDeRISvv4rQdbBf60xjnT5+tssg==","signatures":[{"sig":"MEQCICn4rMsq2dfSrAxQAKmvFxLpTkJQFaVpwuHkrpv6vPCNAiBxKCTu76t1HyetbzuBicAbvYSczzvSak4WZYJ0QhEGsA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0-beta.2","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":22009},"main":"./dist/index.js","type":"module","_from":"file:standard-schema-spec-1.0.0-beta.2.tgz","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"scripts":{"lint":"pnpm biome lint ./src","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"_resolved":"/tmp/892e4ef63115df7974237d62099d74a1/standard-schema-spec-1.0.0-beta.2.tgz","_integrity":"sha512-3xO2jovtlaUYPgj6lTL5rgRnKiPyXQXwUmYlQBu2WcTNHrFdbQZ7nrOcqSEtDeRISvv4rQdbBf60xjnT5+tssg==","repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.2","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.18.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-beta.2_1731033826261_0.26730841655125803","host":"s3://npm-registry-packages"}},"1.0.0-beta.3":{"name":"@standard-schema/spec","version":"1.0.0-beta.3","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-beta.3","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"4dbf9a3c69e10fa2997e1ac1f39d8e9f33213576","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-beta.3.tgz","fileCount":7,"integrity":"sha512-0ifF3BjA1E8SY9C+nUew8RefNOIq0cDlYALPty4rhUm8Rrl6tCM8hBT4bhGhx7I7iXD0uAgt50lgo8dD73ACMw==","signatures":[{"sig":"MEYCIQC+VoQ/meJ9ua6D9mSyzOPrH3kJEGIkpWn2j/rsfEgbngIhANcXvrgnvLdDMH96mjeAL3LvvNYvrKQrZWAkbf72wx9k","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0-beta.3","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":21965},"main":"./dist/index.js","type":"module","_from":"file:standard-schema-spec-1.0.0-beta.3.tgz","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"scripts":{"lint":"pnpm biome lint ./src","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"_resolved":"/tmp/7bb72f693054619c52b3bf56cb8fba7c/standard-schema-spec-1.0.0-beta.3.tgz","_integrity":"sha512-0ifF3BjA1E8SY9C+nUew8RefNOIq0cDlYALPty4rhUm8Rrl6tCM8hBT4bhGhx7I7iXD0uAgt50lgo8dD73ACMw==","repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.2","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.18.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-beta.3_1731079172134_0.07887131885754095","host":"s3://npm-registry-packages"}},"1.0.0-beta.4":{"name":"@standard-schema/spec","version":"1.0.0-beta.4","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-beta.4","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"62f520109add3eb016004098363bfee0678dd1ec","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-beta.4.tgz","fileCount":7,"integrity":"sha512-d3IxtzLo7P1oZ8s8YNvxzBUXRXojSut8pbPrTYtzsc5sn4+53jVqbk66pQerSZbZSJZQux6LkclB/+8IDordHg==","signatures":[{"sig":"MEQCIEpvwjJcMU+mZ1xK/1//eYw0wIWgzcWSaGdnd0zGi5rsAiBwNiXbZPoy+sg2FTa9K53BuND3gxxLFiZZRM2bUe5LqA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0-beta.4","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":22022},"main":"./dist/index.js","type":"module","_from":"file:standard-schema-spec-1.0.0-beta.4.tgz","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"scripts":{"lint":"pnpm biome lint ./src","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"_resolved":"/tmp/6810b23ee344392dfe6c2a2d68058f41/standard-schema-spec-1.0.0-beta.4.tgz","_integrity":"sha512-d3IxtzLo7P1oZ8s8YNvxzBUXRXojSut8pbPrTYtzsc5sn4+53jVqbk66pQerSZbZSJZQux6LkclB/+8IDordHg==","repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.2","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.18.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-beta.4_1732749296479_0.3601810032693309","host":"s3://npm-registry-packages"}},"1.0.0-rc.0":{"name":"@standard-schema/spec","version":"1.0.0-rc.0","keywords":["typescript","schema","validation","standard","interface"],"author":{"name":"Colin McDonnell"},"license":"MIT","_id":"@standard-schema/spec@1.0.0-rc.0","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"homepage":"https://github.com/standard-schema/standard-schema#readme","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"dist":{"shasum":"b17c55e2ba8cbd937588d76839a204ac91bb2f78","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0-rc.0.tgz","fileCount":7,"integrity":"sha512-DcY/ICFcZIESNTLTexIT108HOqd1FtxsiLV4ZYGluySWyjF6TZ6troNyXjiqoHU6j0wN3A6SmYnTA5CHQp9blw==","signatures":[{"sig":"MEUCIAnUIHjVkBqiLph21VONx/hbszGOzcyPbm7XBomFUTvkAiEApdrLLcYPtPPDXBqzNjsS88KA9v9jpiEszIaIaTOviIU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0-rc.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"unpackedSize":22602},"main":"./dist/index.js","type":"module","_from":"file:standard-schema-spec-1.0.0-rc.0.tgz","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"scripts":{"lint":"pnpm biome lint ./src","build":"tsup","check":"pnpm biome check ./src","format":"pnpm biome format --write ./src"},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"_resolved":"/tmp/668f2d7673ebc6cfa66de496fb1d1176/standard-schema-spec-1.0.0-rc.0.tgz","_integrity":"sha512-DcY/ICFcZIESNTLTexIT108HOqd1FtxsiLV4ZYGluySWyjF6TZ6troNyXjiqoHU6j0wN3A6SmYnTA5CHQp9blw==","repository":{"url":"git+https://github.com/standard-schema/standard-schema.git","type":"git"},"_npmVersion":"10.8.2","description":"A standard interface for TypeScript schema validation libraries","directories":{},"sideEffects":false,"_nodeVersion":"20.18.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"_npmOperationalInternal":{"tmp":"tmp/spec_1.0.0-rc.0_1736477112072_0.07372152269862076","host":"s3://npm-registry-packages-npm-production"}},"1.0.0":{"name":"@standard-schema/spec","description":"A standard interface for TypeScript schema validation libraries","version":"1.0.0","license":"MIT","author":{"name":"Colin McDonnell"},"homepage":"https://standardschema.dev","repository":{"type":"git","url":"git+https://github.com/standard-schema/standard-schema.git"},"keywords":["typescript","schema","validation","standard","interface"],"type":"module","main":"./dist/index.js","types":"./dist/index.d.ts","exports":{".":{"import":{"types":"./dist/index.d.ts","default":"./dist/index.js"},"require":{"types":"./dist/index.d.cts","default":"./dist/index.cjs"}}},"sideEffects":false,"publishConfig":{"access":"public"},"devDependencies":{"tsup":"^8.3.0","typescript":"^5.6.2"},"scripts":{"lint":"pnpm biome lint ./src","format":"pnpm biome format --write ./src","check":"pnpm biome check ./src","build":"tsup"},"_id":"@standard-schema/spec@1.0.0","bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"_integrity":"sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==","_resolved":"/tmp/092ac65b2db5e85815b20835b0230da5/standard-schema-spec-1.0.0.tgz","_from":"file:standard-schema-spec-1.0.0.tgz","_nodeVersion":"20.18.1","_npmVersion":"10.8.2","dist":{"integrity":"sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==","shasum":"f193b73dc316c4170f2e82a881da0f550d551b9c","tarball":"https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz","fileCount":7,"unpackedSize":25008,"attestations":{"url":"https://registry.npmjs.org/-/npm/v1/attestations/@standard-schema%2fspec@1.0.0","provenance":{"predicateType":"https://slsa.dev/provenance/v1"}},"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEUCICTWJMg9W+i+lPtG+3RATbCunvUNxvQj18/6IhHF6lpRAiEAjE09RnIUp7AyNhrlbFFOw3ENa8JVlMzCxZDIsXI4wwA="}]},"_npmUser":{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},"directories":{},"maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/spec_1.0.0_1737946999155_0.8220776792324331"},"_hasShrinkwrap":false}},"time":{"created":"2024-09-27T03:07:55.745Z","modified":"2025-01-27T03:03:19.804Z","1.0.0-beta.0":"2024-09-27T03:07:56.009Z","1.0.0-beta.1":"2024-10-06T05:15:01.110Z","1.0.0-beta.2":"2024-11-08T02:43:46.442Z","1.0.0-beta.3":"2024-11-08T15:19:32.347Z","1.0.0-beta.4":"2024-11-27T23:14:56.722Z","1.0.0-rc.0":"2025-01-10T02:45:12.235Z","1.0.0":"2025-01-27T03:03:19.334Z"},"bugs":{"url":"https://github.com/standard-schema/standard-schema/issues"},"author":{"name":"Colin McDonnell"},"license":"MIT","homepage":"https://standardschema.dev","keywords":["typescript","schema","validation","standard","interface"],"repository":{"type":"git","url":"git+https://github.com/standard-schema/standard-schema.git"},"description":"A standard interface for TypeScript schema validation libraries","maintainers":[{"name":"fabian-hiller","email":"hillerfabian11@gmail.com"},{"name":"colinhacks","email":"colinmcd94@gmail.com"}],"readme":"<h1 align=\"center\">\n  <img alt=\"Standard Schema fire logo\" loading=\"lazy\" width=\"50\" height=\"50\" decoding=\"async\" data-nimg=\"1\" style=\"color:transparent\" src=\"https://standardschema.dev/favicon.svg\">\n  </br>\n  Standard Schema</h1>\n<p align=\"center\">\n  A common interface for TypeScript validation libraries\n  <br/>\n  <a href=\"https://standardschema.dev\">standardschema.dev</a>\n</p>\n<br/>\n\n<!-- start -->\n\nStandard Schema is a common interface designed to be implemented by JavaScript and TypeScript schema libraries.\n\nThe goal is to make it easier for ecosystem tools to accept user-defined type validators, without needing to write custom logic or adapters for each supported library. And since Standard Schema is a specification, they can do so with no additional runtime dependencies. Integrate once, validate anywhere.\n\n## Who designed it?\n\nThe spec was designed by the creators of Zod, Valibot, and ArkType. Recent versions of these libraries already implement the spec (see the [full list of compatible libraries](#what-schema-libraries-implement-the-spec) below).\n\n## The interface\n\nThe specification consists of a single TypeScript interface `StandardSchemaV1` to be implemented by any schema library wishing to be spec-compliant.\n\nThis interface can be found below in its entirety. Libraries wishing to implement the spec can copy/paste the code block below into their codebase. It's also available at `@standard-schema/spec` on [npm](https://www.npmjs.com/package/@standard-schema/spec) and [JSR](https://jsr.io/@standard-schema/spec). There will be zero changes without a major version bump.\n\n```ts\n/** The Standard Schema interface. */\nexport interface StandardSchemaV1<Input = unknown, Output = Input> {\n  /** The Standard Schema properties. */\n  readonly '~standard': StandardSchemaV1.Props<Input, Output>;\n}\n\nexport declare namespace StandardSchemaV1 {\n  /** The Standard Schema properties interface. */\n  export interface Props<Input = unknown, Output = Input> {\n    /** The version number of the standard. */\n    readonly version: 1;\n    /** The vendor name of the schema library. */\n    readonly vendor: string;\n    /** Validates unknown input values. */\n    readonly validate: (\n      value: unknown\n    ) => Result<Output> | Promise<Result<Output>>;\n    /** Inferred types associated with the schema. */\n    readonly types?: Types<Input, Output> | undefined;\n  }\n\n  /** The result interface of the validate function. */\n  export type Result<Output> = SuccessResult<Output> | FailureResult;\n\n  /** The result interface if validation succeeds. */\n  export interface SuccessResult<Output> {\n    /** The typed output value. */\n    readonly value: Output;\n    /** The non-existent issues. */\n    readonly issues?: undefined;\n  }\n\n  /** The result interface if validation fails. */\n  export interface FailureResult {\n    /** The issues of failed validation. */\n    readonly issues: ReadonlyArray<Issue>;\n  }\n\n  /** The issue interface of the failure output. */\n  export interface Issue {\n    /** The error message of the issue. */\n    readonly message: string;\n    /** The path of the issue, if any. */\n    readonly path?: ReadonlyArray<PropertyKey | PathSegment> | undefined;\n  }\n\n  /** The path segment interface of the issue. */\n  export interface PathSegment {\n    /** The key representing a path segment. */\n    readonly key: PropertyKey;\n  }\n\n  /** The Standard Schema types interface. */\n  export interface Types<Input = unknown, Output = Input> {\n    /** The input type of the schema. */\n    readonly input: Input;\n    /** The output type of the schema. */\n    readonly output: Output;\n  }\n\n  /** Infers the input type of a Standard Schema. */\n  export type InferInput<Schema extends StandardSchemaV1> = NonNullable<\n    Schema['~standard']['types']\n  >['input'];\n\n  /** Infers the output type of a Standard Schema. */\n  export type InferOutput<Schema extends StandardSchemaV1> = NonNullable<\n    Schema['~standard']['types']\n  >['output'];\n}\n```\n\n## Design goals\n\nThe specification meets a few primary design objectives:\n\n- **Support runtime validation.** Given a Standard Schema compatible validator, you should be able to validate data with it (duh). Any validation errors should be presented in a standardized format.\n- **Support static type inference.** For TypeScript libraries that do type inference, the specification provides a standard way for them to \"advertise\" their inferred type, so it can be extracted and used by external tools.\n- **Minimal.** It should be easy for libraries to implement this spec in a few lines of code that call their existing functions/methods.\n- **Avoid API conflicts.** The entire spec is tucked inside a single object property called `~standard`, which avoids potential naming conflicts with the API surface of existing libraries.\n- **Do no harm to DX.** The `~standard` property is tilde-prefixed to [de-prioritize it in autocompletion](https://x.com/colinhacks/status/1816860780459073933). By contrast, an underscore-prefixed property would show up before properties/methods with alphanumeric names.\n\n## What schema libraries implement the spec?\n\nThese are the libraries that have already implemented the Standard Schema interface. (If you maintain a library that implements the spec, [create a PR](https://github.com/standard-schema/standard-schema/compare) to add yourself!)\n\n| Implementer | Version(s) | Docs                                                                       |\n| ----------- | ---------- | -------------------------------------------------------------------------- |\n| Zod         | 3.24.0+    | [zod.dev](https://zod.dev/)                                                |\n| Valibot     | v1.0+      | [valibot.dev](https://valibot.dev/)                                        |\n| ArkType     | v2.0+      | [arktype.io](https://arktype.io/)                                          |\n| Arri Schema | v0.71.0+   | [github.com/modiimedia/arri](https://github.com/modiimedia/arri)           |\n| TypeMap     | v0.8.0+    | [github.com/sinclairzx81/typemap](https://github.com/sinclairzx81/typemap) |\n\n## What tools / frameworks accept spec-compliant schemas?\n\nThe following tools accept user-defined schemas conforming to the Standard Schema spec. (If you maintain a tool that supports Standard Schemas, [create a PR](https://github.com/standard-schema/standard-schema/compare) to add yourself!)\n\n| Integrator                                              | Description                                                                                                                  | Link                                                                   |\n| ------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| [tRPC](https://trpc.io)                                 | 🧙‍♀️ Move fast and break nothing. End-to-end typesafe APIs made easy                                                           | [PR](https://github.com/trpc/trpc/pull/6079)                           |\n| [TanStack Form](https://github.com/TanStack/form)       | 🤖 Headless, performant, and type-safe form state management for TS/JS, React, Vue, Angular, Solid, and Lit                  | [PR](https://github.com/TanStack/form/issues/1015)                     |\n| [TanStack Router](https://github.com/tanstack/router)   | A fully type-safe React router with built-in data fetching, stale-while revalidate caching and first-class search-param APIs | [PR](https://github.com/TanStack/router/pull/2602)                     |\n| [Hono Middleware 🚧](https://hono.dev)                  | Fast, lightweight server, built on Web Standards                                                                             | [PR](https://github.com/honojs/middleware/pull/887)                    |\n| [Qwik 🚧](https://github.com/QwikDev/qwik)              | Instant-loading web apps, without effort                                                                                     | [PR](https://github.com/QwikDev/qwik/pull/7281)                        |\n| [UploadThing](https://github.com/pingdotgg/uploadthing) | File uploads for modern web devs                                                                                             | [Docs](https://docs.uploadthing.com/file-routes#input)                 |\n| [T3 Env](https://github.com/t3-oss/t3-env)              | Framework agnostic validation for type-safe environment variables                                                            | [PR](https://github.com/t3-oss/t3-env/pull/299)                        |\n| [OpenAuth](https://github.com/openauthjs/openauth)      | Universal, standards-based auth provider                                                                                     | [Docs](https://openauth.js.org/docs/#server)                           |\n| [renoun](https://www.renoun.dev/)                       | The Documentation Toolkit for React                                                                                          | [Docs](https://www.renoun.dev/utilities/file-system#schema-validation) |\n| [Formwerk](https://github.com/formwerkjs/formwerk)      | A Vue.js Framework for building high-quality, accessible, delightful forms.                                                  | [PR](https://github.com/formwerkjs/formwerk/pull/68)                   |\n| [GQLoom](https://github.com/modevol-com/gqloom)         | Weave GraphQL schema and resolvers using Standard Schema                                                                     | [PR](https://github.com/modevol-com/gqloom/pull/7)                     |\n| [Nuxt UI (v3)](https://github.com/nuxt/ui)              | A UI Library for modern web apps, powered by Vue & Tailwind CSS                                                              | [PR](https://github.com/nuxt/ui/pull/2303)                             |\n| [oRPC](https://github.com/unnoq/orpc)                   | Typesafe APIs made simple 🪄                                                                                                 | [PR](https://github.com/unnoq/orpc/pull/50)                            |\n| [Regle](https://github.com/victorgarciaesgi/regle)      | Type-safe model-based form validation library for Vue.js                                                                     | [PR](https://github.com/victorgarciaesgi/regle/pull/46)                |\n\n## How can my schema library implement the spec?\n\nSchemas libraries that want to support Standard Schema must implement the `StandardSchemaV1` interface. Start by copying the specification file above into your library. It consists of types only.\n\nThen implement the spec by adding the `~standard` property to your validator objects/instances. We recommend using `extends` / `implements` to ensure static agreement with the interface. It doesn't matter whether your schema library returns plain objects, functions, or class instances. The only thing that matters is that the `~standard` property is defined somehow.\n\nHere's a simple worked example of a string validator that implements the spec.\n\n```ts\nimport type {StandardSchemaV1} from '@standard-schema/spec';\n\n// Step 1: Define the schema interface\ninterface StringSchema extends StandardSchemaV1<string> {\n  type: 'string';\n  message: string;\n}\n\n// Step 2: Implement the schema interface\nfunction string(message: string = 'Invalid type'): StringSchema {\n  return {\n    type: 'string',\n    message,\n    '~standard': {\n      version: 1,\n      vendor: 'valizod',\n      validate(value) {\n        return typeof value === 'string' ? {value} : {issues: [{message}]};\n      },\n    },\n  };\n}\n```\n\nWe recommend defining the `~standard.validate()` function in terms of your library's existing validation functions/methods. Ideally implementing the spec only requires a handful of lines of code.\n\nAvoid returning `Promise` from `~standard.validate()` unless absolutely necessary. Some third-party libraries may not support async validation.\n\n## How do I accept Standard Schemas in my library?\n\nThird-party libraries and frameworks can leverage the Standard Schema spec to accept user-defined schemas in a type-safe way.\n\nTo get started, copy and paste the specification file into your project. Alternatively (if you are okay with the extra dependency), you can install the `@standard-schema/spec` package from [npm](https://www.npmjs.com/package/@standard-schema/spec) or [JSR](https://jsr.io/@standard-schema/spec) as a dependency. _It is not recommended to install as a dev dependency, see the [associated FAQ](#can-i-add-it-as-a-dev-dependency) for details_.\n\n```sh\nnpm install @standard-schema/spec       # npm\nyarn add @standard-schema/spec          # yarn\npnpm add @standard-schema/spec          # pnpm\nbun add @standard-schema/spec           # bun\ndeno add jsr:@standard-schema/spec      # deno\n```\n\nHere's is an simple example of a generic function that accepts an arbitrary spec-compliant validator and uses it to parse some data.\n\n```ts\nimport type {StandardSchemaV1} from '@standard-schema/spec';\n\nexport async function standardValidate<T extends StandardSchemaV1>(\n  schema: T,\n  input: StandardSchemaV1.InferInput<T>\n): Promise<StandardSchemaV1.InferOutput<T>> {\n  let result = schema['~standard'].validate(input);\n  if (result instanceof Promise) result = await result;\n\n  // if the `issues` field exists, the validation failed\n  if (result.issues) {\n    throw new Error(JSON.stringify(result.issues, null, 2));\n  }\n\n  return result.value;\n}\n```\n\nThis concise function can accept inputs from any spec-compliant schema library.\n\n```ts\nimport * as z from 'zod';\nimport * as v from 'valibot';\nimport {type} from 'arktype';\n\nconst zodResult = await standardValidate(z.string(), 'hello');\nconst valibotResult = await standardValidate(v.string(), 'hello');\nconst arktypeResult = await standardValidate(type('string'), 'hello');\n```\n\n## FAQ\n\nThese are the most frequently asked questions about Standard Schema. If your question is not listed, feel free to create an issue.\n\n### Do I need to add `@standard-schema/spec` as a dependency?\n\nNo. The `@standard-schema/spec` package is completely optional. You can just copy and paste the types into your project. We guarantee no breaking changes without a major version bump.\n\nIf you don't mind additional dependencies, you can add `@standard-schema/spec` as a dependency and consume it with `import type`. The `@standard-schema/spec` package contains no runtime code and only exports types.\n\n### Can I add it as a dev dependency?\n\nDespite being types-only, you should _not_ install `@standard-schema/spec` as a dev dependency. By accepting Standard Schemas as part of your public API, the Standard Schema interface becomes a part of your library's public API. As such, it _must_ be available whenever/wherever your library gets installed, even in production installs. For this to happen, it must be installed as a regular dependency.\n\n### Why did you prefix the `~standard` property with `~`?\n\nThe goal of prefixing the key with `~` is to both avoid conflicts with existing API surfaces and to de-prioritize these keys in auto-complete. The `~` character is one of the few ASCII characters that occurs after `A-Za-z0-9` lexicographically, so VS Code puts these suggestions at the bottom of the list.\n\n![Screenshot showing the de-prioritization of the `~` prefix keys in VS Code.](https://github.com/standard-schema/standard-schema/assets/3084745/5dfc0219-7531-481e-9691-cff5bc471378)\n\n### Why not use a symbol key?\n\nIn TypeScript, using a plain `Symbol` inline as a key always collapses to a simple `symbol` type. This would cause conflicts with other schema properties that use symbols.\n\n```ts\nconst object = {\n  [Symbol.for('~output')]: 'some data',\n};\n// { [k: symbol]: string }\n```\n\nUnique symbols can also be declared in a \"nominal\" way that won't collapse. In this case the symbol key is sorted alphabetically in autocomplete according to the symbol's variable name.\n\n![Screenshot showing the prioritization of external symbols in VS Code](https://github.com/standard-schema/standard-schema/assets/3084745/82c47820-90c3-4163-a838-858b987a6bea)\n\nThus, these symbol keys don't get sorted to the bottom of the autocomplete list, unlike tilde-prefixed string keys.\n\n### How to only allow synchronous validation?\n\nThe `~validate` function might return a synchronous value _or_ a `Promise`. If you only accept synchronous validation, you can simply throw an error if the returned value is an instance of `Promise`. Libraries are encouraged to preferentially use synchronous validation whenever possible.\n\n```ts\nimport type {StandardSchemaV1} from '@standard-schema/spec';\n\nfunction validateInput(schema: StandardSchemaV1, data: unknown) {\n  const result = schema['~standard'].validate(data);\n  if (result instanceof Promise) {\n    throw new TypeError('Schema validation must be synchronous');\n  }\n  // ...\n}\n```\n","readmeFilename":"README.md"}