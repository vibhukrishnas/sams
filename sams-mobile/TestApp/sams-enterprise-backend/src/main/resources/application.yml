server:
  port: 8080
  servlet:
    context-path: /api/v1

spring:
  application:
    name: sams-enterprise-backend
    
  profiles:
    active: production
    
  datasource:
    url: jdbc:postgresql://localhost:5432/sams_enterprise
    username: ${DB_USERNAME:sams_user}
    password: ${DB_PASSWORD:sams_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
    consumer:
      group-id: sams-enterprise
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.sams.enterprise"
        
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            
  ldap:
    urls: ${LDAP_URLS:ldap://localhost:389}
    base: ${LDAP_BASE:dc=company,dc=com}
    username: ${LDAP_USERNAME:}
    password: ${LDAP_PASSWORD:}

# InfluxDB Configuration
influxdb:
  url: ${INFLUXDB_URL:http://localhost:8086}
  token: ${INFLUXDB_TOKEN:}
  org: ${INFLUXDB_ORG:sams-enterprise}
  bucket: ${INFLUXDB_BUCKET:sams-metrics}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:sams-enterprise-secret-key-2024}
  expiration: 86400000 # 24 hours
  refresh-expiration: 604800000 # 7 days

# Third-party Integrations
integrations:
  slack:
    webhook-url: ${SLACK_WEBHOOK_URL:}
    bot-token: ${SLACK_BOT_TOKEN:}
  teams:
    webhook-url: ${TEAMS_WEBHOOK_URL:}
  twilio:
    account-sid: ${TWILIO_ACCOUNT_SID:}
    auth-token: ${TWILIO_AUTH_TOKEN:}
    from-number: ${TWILIO_FROM_NUMBER:}

# SAMS Enterprise Configuration
sams:
  enterprise:
    alert:
      max-correlation-window: 300000 # 5 minutes
      max-batch-size: 100
      processing-interval: 5000 # 5 seconds
    monitoring:
      agent-heartbeat-interval: 30000 # 30 seconds
      agent-timeout: 120000 # 2 minutes
      metrics-retention-days: 90
    security:
      max-login-attempts: 5
      lockout-duration: 900000 # 15 minutes
      session-timeout: 1800000 # 30 minutes
      mfa-enabled: true
    performance:
      max-concurrent-connections: 10000
      rate-limit-requests-per-minute: 1000
      cache-ttl: 300000 # 5 minutes

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Logging Configuration
logging:
  level:
    com.sams.enterprise: INFO
    org.springframework.security: DEBUG
    org.springframework.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/sams-enterprise.log
    max-size: 100MB
    max-history: 30
