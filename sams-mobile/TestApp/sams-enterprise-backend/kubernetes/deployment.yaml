apiVersion: apps/v1
kind: Deployment
metadata:
  name: sams-enterprise-backend
  namespace: sams-enterprise
  labels:
    app: sams-enterprise-backend
    version: v1.0.0
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sams-enterprise-backend
  template:
    metadata:
      labels:
        app: sams-enterprise-backend
        version: v1.0.0
        tier: backend
    spec:
      containers:
      - name: sams-enterprise-backend
        image: sams-enterprise/backend:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: management
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: sams-database-secret
              key: database-url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: sams-database-secret
              key: database-username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sams-database-secret
              key: database-password
        - name: SPRING_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: sams-config
              key: redis-host
        - name: SPRING_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: sams-config
              key: redis-port
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: sams-config
              key: kafka-bootstrap-servers
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: sams-jwt-secret
              key: jwt-secret
        - name: INTEGRATIONS_SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: sams-integrations-secret
              key: slack-webhook-url
        - name: INTEGRATIONS_TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: sams-integrations-secret
              key: twilio-account-sid
        - name: INTEGRATIONS_TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: sams-integrations-secret
              key: twilio-auth-token
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: sams-config
      - name: logs-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: sams-enterprise-backend-service
  namespace: sams-enterprise
  labels:
    app: sams-enterprise-backend
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: management
  selector:
    app: sams-enterprise-backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sams-enterprise-backend-hpa
  namespace: sams-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sams-enterprise-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sams-config
  namespace: sams-enterprise
data:
  redis-host: "sams-redis-service"
  redis-port: "6379"
  kafka-bootstrap-servers: "sams-kafka-service:9092"
  influxdb-url: "http://sams-influxdb-service:8086"
  application.yml: |
    server:
      port: 8080
      servlet:
        context-path: /api/v1
    
    spring:
      application:
        name: sams-enterprise-backend
      profiles:
        active: kubernetes
      
      datasource:
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
      
      jpa:
        hibernate:
          ddl-auto: validate
        show-sql: false
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
            jdbc:
              batch_size: 20
            order_inserts: true
            order_updates: true
      
      redis:
        timeout: 2000ms
        lettuce:
          pool:
            max-active: 8
            max-idle: 8
            min-idle: 0
      
      kafka:
        bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
          acks: all
          retries: 3
        consumer:
          group-id: sams-enterprise
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
          auto-offset-reset: earliest
    
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: always
          probes:
            enabled: true
      metrics:
        export:
          prometheus:
            enabled: true
    
    logging:
      level:
        com.sams.enterprise: INFO
        org.springframework.security: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      file:
        name: /app/logs/sams-enterprise.log
        max-size: 100MB
        max-history: 30

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sams-enterprise-ingress
  namespace: sams-enterprise
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.sams-enterprise.com
    secretName: sams-enterprise-tls
  rules:
  - host: api.sams-enterprise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sams-enterprise-backend-service
            port:
              number: 8080

---
apiVersion: v1
kind: Secret
metadata:
  name: sams-database-secret
  namespace: sams-enterprise
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL3NhbXMtcG9zdGdyZXNxbC1zZXJ2aWNlOjU0MzIvc2Ftc19lbnRlcnByaXNl
  database-username: c2Ftc191c2Vy
  database-password: c2Ftc19wYXNzd29yZA==

---
apiVersion: v1
kind: Secret
metadata:
  name: sams-jwt-secret
  namespace: sams-enterprise
type: Opaque
data:
  jwt-secret: c2Ftcy1lbnRlcnByaXNlLWp3dC1zZWNyZXQta2V5LTIwMjQ=

---
apiVersion: v1
kind: Secret
metadata:
  name: sams-integrations-secret
  namespace: sams-enterprise
type: Opaque
data:
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWA==
  twilio-account-sid: QUNYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhY
  twilio-auth-token: WFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhY

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sams-enterprise-backend-pdb
  namespace: sams-enterprise
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sams-enterprise-backend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sams-enterprise-backend-sa
  namespace: sams-enterprise

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sams-enterprise-backend-role
  namespace: sams-enterprise
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sams-enterprise-backend-rolebinding
  namespace: sams-enterprise
subjects:
- kind: ServiceAccount
  name: sams-enterprise-backend-sa
  namespace: sams-enterprise
roleRef:
  kind: Role
  name: sams-enterprise-backend-role
  apiGroup: rbac.authorization.k8s.io
