package com.sams.monitor.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sams.monitor.entity.User;
import com.sams.monitor.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.not;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureTestMvc
@ActiveProfiles("test")
@Transactional
class SecurityVulnerabilityTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private UserRepository userRepository;

    private User testUser;

    @BeforeEach
    void setUp() {
        userRepository.deleteAll();
        
        testUser = User.builder()
                .username("securityuser")
                .email("security@example.com")
                .password("$2a$10$encrypted.password")
                .role("USER")
                .enabled(true)
                .build();
        testUser = userRepository.save(testUser);
    }

    @Test
    void sqlInjection_ShouldBePreventedInAlertSearch() throws Exception {
        // SQL injection attempt in search parameter
        String maliciousInput = "'; DROP TABLE alerts; --";
        
        mockMvc.perform(get("/api/v1/alerts")
                .param("search", maliciousInput)
                .header("Authorization", "Bearer valid-token"))
                .andExpect(status().isUnauthorized()); // Should require authentication
        
        // With authentication
        mockMvc.perform(get("/api/v1/alerts")
                .param("search", maliciousInput)
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isOk())
                .andExpect(content().string(not(containsString("DROP TABLE"))));
    }

    @Test
    void xssAttack_ShouldBeSanitizedInAlertCreation() throws Exception {
        String xssPayload = "<script>alert('XSS')</script>";
        
        String alertRequest = """
            {
                "title": "%s",
                "description": "Test description",
                "severity": "WARNING",
                "serverId": "550e8400-e29b-41d4-a716-446655440000"
            }
            """.formatted(xssPayload);

        mockMvc.perform(post("/api/v1/alerts")
                .contentType(MediaType.APPLICATION_JSON)
                .content(alertRequest)
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isBadRequest()) // Should validate input
                .andExpect(content().string(not(containsString("<script>"))));
    }

    @Test
    void unauthorizedAccess_ShouldBeBlocked() throws Exception {
        // Test without authentication
        mockMvc.perform(get("/api/v1/alerts"))
                .andExpect(status().isUnauthorized());

        mockMvc.perform(post("/api/v1/alerts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(status().isUnauthorized());

        mockMvc.perform(delete("/api/v1/alerts/123"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    void invalidToken_ShouldBeRejected() throws Exception {
        String invalidToken = "invalid.jwt.token";
        
        mockMvc.perform(get("/api/v1/alerts")
                .header("Authorization", "Bearer " + invalidToken))
                .andExpect(status().isUnauthorized());
    }

    @Test
    void expiredToken_ShouldBeRejected() throws Exception {
        String expiredToken = generateExpiredToken();
        
        mockMvc.perform(get("/api/v1/alerts")
                .header("Authorization", "Bearer " + expiredToken))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @WithMockUser(username = "user", roles = {"USER"})
    void roleBasedAccess_ShouldEnforcePermissions() throws Exception {
        // User role should not be able to delete alerts
        mockMvc.perform(delete("/api/v1/alerts/123"))
                .andExpect(status().isForbidden());
        
        // User role should not be able to create servers
        mockMvc.perform(post("/api/v1/servers")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpected(status().isForbidden());
    }

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void adminAccess_ShouldAllowAllOperations() throws Exception {
        // Admin should be able to perform all operations
        mockMvc.perform(get("/api/v1/alerts"))
                .andExpect(status().isOk());
        
        mockMvc.perform(get("/api/v1/servers"))
                .andExpect(status().isOk());
        
        mockMvc.perform(get("/api/v1/users"))
                .andExpect(status().isOk());
    }

    @Test
    void massAssignment_ShouldBePreventedInUserUpdate() throws Exception {
        String maliciousUserUpdate = """
            {
                "username": "newusername",
                "email": "new@example.com",
                "role": "ADMIN",
                "enabled": true
            }
            """;

        mockMvc.perform(put("/api/v1/users/" + testUser.getId())
                .contentType(MediaType.APPLICATION_JSON)
                .content(maliciousUserUpdate)
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isForbidden()); // Should not allow role escalation
    }

    @Test
    void pathTraversal_ShouldBePreventedInFileDownload() throws Exception {
        String maliciousPath = "../../../etc/passwd";
        
        mockMvc.perform(get("/api/v1/reports/download")
                .param("filename", maliciousPath)
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isBadRequest())
                .andExpect(content().string(not(containsString("root:"))));
    }

    @Test
    void csrfProtection_ShouldBeEnabledForStateChangingOperations() throws Exception {
        // CSRF protection should be enabled for POST, PUT, DELETE operations
        mockMvc.perform(post("/api/v1/alerts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}")
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isForbidden()); // Should require CSRF token
    }

    @Test
    void rateLimiting_ShouldPreventBruteForceAttacks() throws Exception {
        // Simulate multiple rapid requests
        for (int i = 0; i < 100; i++) {
            mockMvc.perform(post("/api/v1/auth/login")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("""
                        {
                            "username": "admin",
                            "password": "wrongpassword"
                        }
                        """));
        }
        
        // After many failed attempts, should be rate limited
        mockMvc.perform(post("/api/v1/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "admin",
                        "password": "wrongpassword"
                    }
                    """))
                .andExpect(status().isTooManyRequests());
    }

    @Test
    void sensitiveDataExposure_ShouldNotLeakInformation() throws Exception {
        // Error responses should not expose sensitive information
        mockMvc.perform(get("/api/v1/alerts/invalid-uuid")
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isBadRequest())
                .andExpect(content().string(not(containsString("database"))))
                .andExpect(content().string(not(containsString("SQL"))))
                .andExpect(content().string(not(containsString("Exception"))));
    }

    @Test
    void httpHeaders_ShouldIncludeSecurityHeaders() throws Exception {
        mockMvc.perform(get("/api/v1/health"))
                .andExpect(header().exists("X-Content-Type-Options"))
                .andExpect(header().string("X-Content-Type-Options", "nosniff"))
                .andExpect(header().exists("X-Frame-Options"))
                .andExpect(header().string("X-Frame-Options", "DENY"))
                .andExpect(header().exists("X-XSS-Protection"))
                .andExpect(header().string("X-XSS-Protection", "1; mode=block"))
                .andExpect(header().exists("Strict-Transport-Security"));
    }

    @Test
    void inputValidation_ShouldRejectInvalidData() throws Exception {
        // Test with invalid email format
        String invalidUserData = """
            {
                "username": "",
                "email": "invalid-email",
                "password": "123"
            }
            """;

        mockMvc.perform(post("/api/v1/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidUserData)
                .header("Authorization", "Bearer " + generateAdminToken()))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errors").exists());
    }

    @Test
    void passwordSecurity_ShouldEnforceStrongPasswords() throws Exception {
        String weakPasswordData = """
            {
                "username": "testuser",
                "email": "test@example.com",
                "password": "123"
            }
            """;

        mockMvc.perform(post("/api/v1/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(weakPasswordData)
                .header("Authorization", "Bearer " + generateAdminToken()))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.errors[?(@.field == 'password')]").exists());
    }

    @Test
    void sessionManagement_ShouldHandleSessionsSecurely() throws Exception {
        // Test session fixation protection
        String loginRequest = """
            {
                "username": "securityuser",
                "password": "correctpassword"
            }
            """;

        mockMvc.perform(post("/api/v1/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(loginRequest))
                .andExpect(status().isOk())
                .andExpect(header().exists("Set-Cookie"))
                .andExpect(header().string("Set-Cookie", containsString("HttpOnly")))
                .andExpect(header().string("Set-Cookie", containsString("Secure")))
                .andExpect(header().string("Set-Cookie", containsString("SameSite")));
    }

    @Test
    void dataEncryption_ShouldProtectSensitiveData() throws Exception {
        // Verify that sensitive data is not exposed in responses
        mockMvc.perform(get("/api/v1/users/" + testUser.getId())
                .header("Authorization", "Bearer " + generateAdminToken()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.password").doesNotExist())
                .andExpect(jsonPath("$.passwordHash").doesNotExist());
    }

    @Test
    void apiVersioning_ShouldNotExposeInternalVersions() throws Exception {
        // Test that internal API versions are not exposed
        mockMvc.perform(get("/api/internal/alerts")
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isNotFound());
        
        mockMvc.perform(get("/api/admin/system")
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isForbidden());
    }

    @Test
    void fileUpload_ShouldValidateFileTypes() throws Exception {
        // Test file upload with malicious file
        mockMvc.perform(multipart("/api/v1/reports/upload")
                .file("file", "malicious.exe".getBytes())
                .header("Authorization", "Bearer " + generateValidToken()))
                .andExpect(status().isBadRequest())
                .andExpect(content().string(containsString("Invalid file type")));
    }

    // Helper methods for generating tokens
    private String generateValidToken() {
        // In a real implementation, this would generate a valid JWT token
        return "valid.jwt.token.for.testing";
    }

    private String generateExpiredToken() {
        // In a real implementation, this would generate an expired JWT token
        return "expired.jwt.token.for.testing";
    }

    private String generateAdminToken() {
        // In a real implementation, this would generate a JWT token with admin role
        return "admin.jwt.token.for.testing";
    }
}
