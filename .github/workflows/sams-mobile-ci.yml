name: SAMS Mobile CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'sams-mobile/**'
      - '.github/workflows/sams-mobile-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'sams-mobile/**'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.1'

jobs:
  test:
    name: Test & Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-mobile/TestApp/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-mobile/TestApp
      run: npm ci
      
    - name: Run linting
      working-directory: sams-mobile/TestApp
      run: npm run lint
      
    - name: Run unit tests
      working-directory: sams-mobile/TestApp
      run: npm test -- --coverage --watchAll=false
      
    - name: Run performance tests
      working-directory: sams-mobile/TestApp
      run: npm run test:performance
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mobile-test-results
        path: |
          sams-mobile/TestApp/coverage/
          sams-mobile/TestApp/reports/

  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-mobile/TestApp/package-lock.json
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      working-directory: sams-mobile/TestApp
      run: npm ci
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: Build Android Debug APK
      working-directory: sams-mobile/TestApp
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Build Android Release APK
      working-directory: sams-mobile/TestApp
      run: |
        cd android
        ./gradlew assembleRelease
      env:
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        
    - name: Upload Android APKs
      uses: actions/upload-artifact@v3
      with:
        name: android-apks
        path: |
          sams-mobile/TestApp/android/app/build/outputs/apk/debug/*.apk
          sams-mobile/TestApp/android/app/build/outputs/apk/release/*.apk

  ios-build:
    name: iOS Build & Test
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-mobile/TestApp/package-lock.json
        
    - name: Set up Ruby ${{ env.RUBY_VERSION }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: sams-mobile/TestApp/ios
        
    - name: Install dependencies
      working-directory: sams-mobile/TestApp
      run: npm ci
      
    - name: Install CocoaPods
      working-directory: sams-mobile/TestApp/ios
      run: |
        bundle install
        bundle exec pod install
        
    - name: Build iOS Debug
      working-directory: sams-mobile/TestApp
      run: |
        npx react-native run-ios --configuration Debug --simulator="iPhone 14"
        
    - name: Build iOS Release
      working-directory: sams-mobile/TestApp/ios
      run: |
        xcodebuild -workspace TestApp.xcworkspace \
          -scheme TestApp \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath TestApp.xcarchive \
          archive
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY }}
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        
    - name: Export iOS IPA
      working-directory: sams-mobile/TestApp/ios
      run: |
        xcodebuild -exportArchive \
          -archivePath TestApp.xcarchive \
          -exportPath . \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload iOS IPA
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: sams-mobile/TestApp/ios/*.ipa

  e2e-tests:
    name: E2E Testing
    runs-on: macos-latest
    needs: [android-build, ios-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-mobile/TestApp/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-mobile/TestApp
      run: npm ci
      
    - name: Install Detox CLI
      run: npm install -g detox-cli
      
    - name: Build Detox
      working-directory: sams-mobile/TestApp
      run: detox build --configuration ios.sim.debug
      
    - name: Run Detox E2E tests
      working-directory: sams-mobile/TestApp
      run: detox test --configuration ios.sim.debug --cleanup
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          sams-mobile/TestApp/e2e/artifacts/
          sams-mobile/TestApp/e2e/reports/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-mobile/TestApp/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-mobile/TestApp
      run: npm ci
      
    - name: Run npm audit
      working-directory: sams-mobile/TestApp
      run: npm audit --audit-level=moderate
      
    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [android-build, ios-build, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v3
      with:
        name: android-apks
        path: ./android-apks
        
    - name: Download iOS IPA
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa
        path: ./ios-ipa
        
    - name: Deploy to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        groups: staging-testers
        file: ./android-apks/app-debug.apk
        
    - name: Deploy iOS to TestFlight
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: ./ios-ipa/TestApp.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [android-build, ios-build, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v3
      with:
        name: android-apks
        path: ./android-apks
        
    - name: Download iOS IPA
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa
        path: ./ios-ipa
        
    - name: Deploy Android to Google Play
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.sams.testapp
        releaseFiles: ./android-apks/app-release.apk
        track: production
        status: completed
        
    - name: Deploy iOS to App Store
      uses: apple-actions/upload-app-store-build@v1
      with:
        app-path: ./ios-ipa/TestApp.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#mobile-releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
