name: SAMS Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'sams-frontend-testing/**'
      - '.github/workflows/sams-frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'sams-frontend-testing/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sams/frontend
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-frontend-testing/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-frontend-testing
      run: npm ci
      
    - name: Run linting
      working-directory: sams-frontend-testing
      run: npm run lint
      
    - name: Run unit tests
      working-directory: sams-frontend-testing
      run: npm run test:coverage
      
    - name: Run accessibility tests
      working-directory: sams-frontend-testing
      run: npm run test:accessibility
      
    - name: Build application
      working-directory: sams-frontend-testing
      run: npm run build
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          sams-frontend-testing/coverage/
          sams-frontend-testing/test-results/
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: sams-frontend-testing/build/

  e2e-tests:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-frontend-testing/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-frontend-testing
      run: npm ci
      
    - name: Start backend services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Run Cypress E2E tests
      working-directory: sams-frontend-testing
      run: npm run test:e2e
      env:
        CYPRESS_baseUrl: http://localhost:3000
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          sams-frontend-testing/cypress/screenshots/
          sams-frontend-testing/cypress/videos/
          
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-frontend-testing/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-frontend-testing
      run: npm ci
      
    - name: Run visual regression tests
      working-directory: sams-frontend-testing
      run: npm run test:visual
      env:
        PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        
    - name: Upload visual test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: visual-results
        path: sams-frontend-testing/percy-results/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-frontend-testing/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-frontend-testing
      run: npm ci
      
    - name: Run npm audit
      working-directory: sams-frontend-testing
      run: npm audit --audit-level=moderate
      
    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-security-reports
        path: snyk-report.json

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, visual-regression, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: sams-frontend-testing/package-lock.json
        
    - name: Install dependencies
      working-directory: sams-frontend-testing
      run: npm ci
      
    - name: Build production application
      working-directory: sams-frontend-testing
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_VERSION: ${{ github.sha }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: sams-frontend-testing
        file: sams-frontend-testing/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        envsubst < k8s/staging/frontend-deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/sams-frontend -n staging
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=sams-frontend -n staging --timeout=300s
        curl -f http://staging.sams.local/ || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Blue-Green Deployment
      run: |
        export KUBECONFIG=kubeconfig
        ./scripts/blue-green-deploy.sh frontend ${{ needs.build.outputs.image-tag }}
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        
    - name: Health check
      run: |
        ./scripts/health-check.sh production frontend
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
