name: Security Vulnerability Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-security-scan:
    name: Python Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep pip-audit

    # 🔒 PYTHON DEPENDENCY VULNERABILITY SCANNING
    - name: Run Safety (Python package vulnerabilities)
      run: |
        # Check if requirements files exist and scan them
        echo "🔍 Scanning Python dependencies with Safety..."
        if [ -f requirements.txt ]; then
          echo "Scanning requirements.txt"
          safety check -r requirements.txt --json --output safety-requirements-report.json || true
        fi
        if [ -f requirements_v2.txt ]; then
          echo "Scanning requirements_v2.txt"  
          safety check -r requirements_v2.txt --json --output safety-requirements-v2-report.json || true
        fi
        
        # Scan installed packages
        safety check --json --output safety-installed-report.json || true
        
        # Display results
        safety check || echo "Safety scan completed with warnings"

    - name: Run pip-audit (Alternative Python vulnerability scanner)
      run: |
        echo "🔍 Running pip-audit for additional coverage..."
        if [ -f requirements.txt ]; then
          pip-audit --requirement requirements.txt --format json --output pip-audit-requirements.json || true
        fi
        if [ -f requirements_v2.txt ]; then
          pip-audit --requirement requirements_v2.txt --format json --output pip-audit-requirements-v2.json || true
        fi

    # 🔒 PYTHON CODE SECURITY ANALYSIS
    - name: Run Bandit (Python security linter)
      run: |
        echo "🔍 Running Bandit static security analysis..."
        bandit -r . -f json -o bandit-report.json --skip B101,B601 || true
        bandit -r . -f txt || echo "Bandit scan completed"

    # 🔒 SEMGREP SECURITY RULES
    - name: Run Semgrep (Multi-language security scanner)
      run: |
        echo "🔍 Running Semgrep security analysis..."
        semgrep --config=auto --json --output semgrep-report.json . || true
        semgrep --config=auto . || echo "Semgrep scan completed"

    - name: Upload Python security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: python-security-reports
        path: |
          safety-*-report.json
          pip-audit-*.json
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    # 🔒 INFRASTRUCTURE AS CODE SECURITY SCANNING
    - name: Scan Dockerfile configurations
      run: |
        echo "🔍 Scanning Dockerfile configurations..."
        find . -name "Dockerfile*" -exec trivy config {} \; || true

    - name: Scan Docker Compose files
      run: |
        echo "🔍 Scanning Docker Compose configurations..."
        find . -name "docker-compose*.yml" -exec trivy config {} \; || true

    - name: Scan Kubernetes manifests
      run: |
        echo "🔍 Scanning Kubernetes configurations..."
        if [ -d "k8s/" ]; then
          trivy config k8s/ --format json --output k8s-security-report.json || true
          trivy config k8s/ || echo "K8s security scan completed"
        fi

    - name: Scan Terraform configurations
      run: |
        echo "🔍 Scanning Terraform configurations..."
        if [ -d "terraform/" ]; then
          trivy config terraform/ --format json --output terraform-security-report.json || true
          trivy config terraform/ || echo "Terraform security scan completed"
        fi

    - name: Upload infrastructure security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-security-reports
        path: |
          *-security-report.json
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security-scan, infrastructure-security-scan]
    if: always()

    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        pattern: '*-security-reports'
        merge-multiple: true

    - name: Generate security summary
      run: |
        echo "# 🔒 SAMS Security Scan Summary" > security-summary.md
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md

        # Count vulnerabilities by type
        echo "## 📊 Vulnerability Overview" >> security-summary.md
        echo "" >> security-summary.md

        # Python vulnerabilities
        if [ -f safety-requirements-report.json ]; then
          PYTHON_VULNS=$(jq '.vulnerabilities | length' safety-requirements-report.json 2>/dev/null || echo "0")
          echo "- **Python Dependencies:** $PYTHON_VULNS vulnerabilities found" >> security-summary.md
        fi

        # Infrastructure findings
        if [ -f k8s-security-report.json ]; then
          K8S_ISSUES=$(jq '.Results[].Vulnerabilities // [] | length' k8s-security-report.json 2>/dev/null | awk '{s+=$1} END {print s}' || echo "0")
          echo "- **Kubernetes Config:** $K8S_ISSUES issues found" >> security-summary.md
        fi

        # Code security issues
        if [ -f bandit-report.json ]; then
          CODE_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          echo "- **Python Code Security:** $CODE_ISSUES potential issues found" >> security-summary.md
        fi

        echo "" >> security-summary.md
        echo "## 🎯 Recommendations" >> security-summary.md
        echo "1. Review and update vulnerable dependencies" >> security-summary.md
        echo "2. Address high-severity configuration issues" >> security-summary.md
        echo "3. Follow security best practices for code changes" >> security-summary.md
        echo "4. Schedule regular security reviews" >> security-summary.md

        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90

    # Optional: Post security summary as PR comment
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } catch (error) {
            console.log('Could not post security summary:', error.message);
          }
