# üê≥ Development Environment - Docker Compose
# Complete development stack with all required services

version: '3.8'

services:
  # =====================================================
  # DATABASE SERVICES
  # =====================================================
  
  # PostgreSQL - Primary relational database
  postgres:
    image: postgres:16.1-alpine
    container_name: monitoring-postgres-dev
    environment:
      POSTGRES_DB: infrastructure_monitoring
      POSTGRES_USER: monitoring_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./scripts/dev-data.sql:/docker-entrypoint-initdb.d/02-dev-data.sql
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoring_user -d infrastructure_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  # InfluxDB - Time-series database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: monitoring-influxdb-dev
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: dev_password_123
      DOCKER_INFLUXDB_INIT_ORG: monitoring-org
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: dev-token-12345678901234567890
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache and session store
  redis:
    image: redis:7.2-alpine
    container_name: monitoring-redis-dev
    command: redis-server --appendonly yes --requirepass dev_password_123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - Search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: monitoring-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =====================================================
  # MESSAGE QUEUE SERVICES
  # =====================================================

  # Zookeeper - Kafka dependency
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: monitoring-zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - monitoring-network

  # Kafka - Message streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: monitoring-kafka-dev
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # =====================================================
  # MONITORING SERVICES
  # =====================================================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: monitoring-prometheus-dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: monitoring-grafana-dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_password_123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # DEVELOPMENT TOOLS
  # =====================================================

  # Adminer - Database management
  adminer:
    image: adminer:4.8.1
    container_name: monitoring-adminer-dev
    ports:
      - "8080:8080"
    networks:
      - monitoring-network
    depends_on:
      - postgres

  # Kafka UI - Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: monitoring-kafka-ui-dev
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8081:8080"
    networks:
      - monitoring-network
    depends_on:
      - kafka

  # =====================================================
  # APPLICATION SERVICES (for development)
  # =====================================================

  # Backend API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: monitoring-api-gateway-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      DATABASE_URL: jdbc:postgresql://postgres:5432/infrastructure_monitoring
      DATABASE_USERNAME: monitoring_user
      DATABASE_PASSWORD: dev_password_123
      REDIS_HOST: redis
      REDIS_PASSWORD: dev_password_123
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: dev-token-12345678901234567890
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8090:8080"
    volumes:
      - ./backend:/app
      - /app/target
    networks:
      - monitoring-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

# =====================================================
# NETWORKS AND VOLUMES
# =====================================================

networks:
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
